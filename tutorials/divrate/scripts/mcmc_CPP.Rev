################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   episodic birth-death model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Read in the "observed" tree
T <- readTrees("data/primates_tree.nex")[1]

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


####################
# Create the rates #
####################

MAX_AGE = T.rootAge()

# we create the events drawn from the multi-value event eventDistribution
# as a prior on the number of events, we use a Poisson distribution with a mean of 10
# we have two valueDistribution
# - the population sizes with prior Uniform(1E4,1E8)
# - the change times with prior Uniform(0.0,MAX_AGE)
# we also assume that there is at least on population size but no change time
events ~ dnMultiValueEvent (eventDistribution = dnPoisson(lambda=10),
                   valueDistribution=[dnUniform(0.0,MAX_AGE),
                                      dnUniform(0.0,1E2),
                                      dnUniform(0.0,1E2)],
                   names=["time","speciation","extinction"],
                   minNumberEvents=[0,1,1])

# apply a move that adds and removes pairs of theta+time
moves.append( mvMultiValueEventBirthDeath(events, weight=50) )
# add a move that changes the speciation variables
moves.append( mvMultiValueEventScale(events, name="speciation", lambda=1.0, weight=10, tune=TRUE) )
# add a move that changes the extinction variables
moves.append( mvMultiValueEventScale(events, name="extinction", lambda=1.0, weight=10, tune=TRUE) )
# add a move that changes the time variables
moves.append( mvMultiValueEventSlide(events, name="time", lambda=10.0, weight=10, tune=TRUE) )
moves.append( mvMultiValueEventScale(events, name="time", lambda=0.5, weight=10, tune=TRUE) )

n_events := events.getNumberOfEvents()
speciation := events.getRealPosValues(name="speciation")
extinction := events.getRealPosValues(name="extinction")
interval_times := events.getRealPosValues(name="time")


### rho is the probability of sampling species at the present
### fix this to 233/367, since there are ~367 described species of primates
### and we have sampled 233
rho <- T.ntips()/367

timetree ~ dnEpisodicBirthDeath(rootAge=T.rootAge(), lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rho=rho, samplingStrategy="uniform", condition="survival", taxa=taxa)

### clamp the model with the "observed" tree
timetree.clamp(T)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rho)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/primates_CPP.log",printgen=10, separator = TAB) )
monitors.append( mnFile(filename="output/primates_CPP_speciation_rates.log",printgen=10, separator = TAB, speciation) )
monitors.append( mnFile(filename="output/primates_CPP_speciation_times.log",printgen=10, separator = TAB, interval_times) )
monitors.append( mnFile(filename="output/primates_CPP_extinction_rates.log",printgen=10, separator = TAB, extinction) )
monitors.append( mnFile(filename="output/primates_CPP_extinction_times.log",printgen=10, separator = TAB, interval_times) )
monitors.append( mnScreen(printgen=1000, n_events) )



################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

### run the MCMC ###
mymcmc.run(generations=5000, tuningInterval=200)


## quit ##
q()
