################################################################################
#
# RevBayes Example: Homochronous constant coalescent process applied to horse data
#
# authors: Sebastian Hoehna, Ronja Billenstein
#
################################################################################

## Global settings

NUM_MCMC_ITERATIONS = 10000
THINNING            = 10

# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()

#######################
# Reading in the Data #
#######################

# Read in the names and ages of the taxa - not needed, all homochronous, t = 0
# taxa <- readTaxonData("data/horses_homochronous_ages_inyears_nooutgroup.tsv")

# Read in sequence data
sequences <- readDiscreteCharacterData("data/horses_homochronous_sequences_nooutgroup.fasta")
taxa <- sequences.taxa()

# Get the number of taxa and branches. We need these later on.
n_taxa <- taxa.size()
# n_branches <- 2 * n_taxa - 3


##############
# Tree model #
##############

pop_size ~ dnUniform(0,1E8)
pop_size.setValue(100)
moves.append( mvScale(pop_size, lambda=0.1, tune=true, weight=2.0) )

### the time tree is a stochastic node modeled by the constant coalescent process (dnConstantCoalescent)
psi ~ dnCoalescent(theta=pop_size, taxa=taxa)

root_age := psi.rootAge()
obs_root_age ~ dnNormal(mean = root_age, sd = 60000, min = 250000, max = 500000)
obs_root_age.clamp(375000)

### add some moves that change the tree
moves.append( mvNarrow(psi, weight=n_taxa) )
moves.append( mvNNI(psi, weight=n_taxa) )
moves.append( mvFNPR(psi, weight=n_taxa/4.0) )
moves.append( mvSubtreeScale(psi, weight=n_taxa/5.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=n_taxa) )
moves.append( mvRootTimeScaleBactrian(psi, weight=n_taxa/5.0) )
moves.append( mvTreeScale(psi, weight=n_taxa/5.0) )

#############
# Sequences #
#############

er_prior <- v(1,1,1,1,1,1)
pi_prior <- v(1,1,1,1)
er ~ dnDirichlet(er_prior)
pi ~ dnDirichlet(pi_prior)

moves.append( mvBetaSimplex(er, weight=3) )
moves.append( mvDirichletSimplex(er, weight=1) )
moves.append( mvBetaSimplex(pi, weight=2) )
moves.append( mvDirichletSimplex(pi, weight=1) )

Q := fnGTR(er,pi)

alpha ~ dnUniform( 0.0, 1E6 )
alpha.setValue( 1.0 )
sr := fnDiscretizeGamma( alpha, alpha, 4 )
moves.append( mvScale(alpha, weight=2.0) )

p_inv ~ dnBeta(1,1)
moves.append( mvSlide(p_inv) )

# lambda = 1/mean, mean = 4.68e-8
rate <- 1/(4.68e-8)
clock ~ dnExponential(lambda = rate)
clock.setValue(4.68e-8)
# moves.append( mvScale(clock, weight=2.0) )
up_down_move = mvUpDownScale(weight=5.0)
up_down_move.addVariable(clock,up=TRUE)
up_down_move.addVariable(psi,up=FALSE)
moves.append( up_down_move)

seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteRates=sr, pInv=p_inv, type="DNA", branchRates=clock)
# seq ~ dnPhyloCTMC(tree=psi, Q=Q, pInv=p_inv, type="DNA", branchRates=clock)
seq.clamp(sequences)


#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(psi)



################
# The Analysis #
################

#add monitors
monitors.append( mnModel(filename="output/horses_constant.log",printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_constant.trees",psi,printgen=THINNING) )
monitors.append( mnFile(filename="output/horses_constant_NE.log",pop_size,printgen=THINNING) )
monitors.append( mnScreen(pop_size, root_age, printgen=100) )

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.burnin(NUM_MCMC_ITERATIONS*0.1,100)
mymcmc.run(NUM_MCMC_ITERATIONS, tuning = 100)

mymcmc.operatorSummary()

################

# you may want to quit RevBayes now
q()
