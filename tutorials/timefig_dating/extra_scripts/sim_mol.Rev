# generates seq data for tree

# tunable settings
num_sites         <- 20        
tree_height       <- 1.0   # tree height
mu_base           <- 0.01  # clock rate
mu_branch         <- 100.0   # clock variability
mu_locus          <- 10.0
pi_factor         <- 0.75  # base freq for A in locus 1
alpha             <- 0.01

if (alpha < 10000 || pi_factor != 0.25 || mu_locus != 1.0) {
    add_spacer = true
} else {
    add_spacer = false
}

fn = "mol"
fn += ".th_" + tree_height
fn += ".m0_" + mu_base
fn += ".mb_" + mu_branch
fn += ".ml_" + mu_locus
fn += ".pi_" + pi_factor
fn += ".nex"

# input settings
phy = readTrees("phy.tre")[1]
seq_blank = readDiscreteCharacterData("mol_blank.nex")
phy.rescale( tree_height / phy.rootAge() )
num_loci = 2
taxa = phy.taxa()
num_taxa = taxa.size()
num_branches = 2 * num_taxa - 2

# relaxed clock
for (i in 1:num_branches) {
    mu_branch_vec[i] <- abs(mu_base)
    if (i == 3 || i == 22) {
        mu_branch_vec[i] <- abs(mu_base * mu_branch)
    }
}
print(mu_branch)
print(phy)

# locus rates
mu[1] <- mu_branch_vec
mu[2] <- mu_locus * mu_branch_vec

# subst process
kappa <- 3
pi_mol[1] <- rep(0.25, 4)
pi_mol[2][1] <- pi_factor
for (i in 2:4) {
    pi_mol[2][i] <- abs(1.0 - pi_mol[2][1]) / 3
}
for (i in 1:2) {
    pi_mol_simplex[i] <- simplex(pi_mol[i])
    Q[i] <- fnHKY(kappa, pi_mol_simplex[i])
}

gamma_rates[1] <- rep(1., 4)
gamma_rates[2] <- fnDiscretizeGamma(alpha, alpha, numCats=10)
print(gamma_rates)


for (i in 1:2) {
    seq[i] ~ dnPhyloCTMC(tree=phy, Q=Q[i], branchRates=mu[i], siteRates=gamma_rates[i], nSites=num_sites)

}

if (add_spacer) {
    x = concatenate(seq[1], seq_blank, seq[2])
} else {
    x = concatenate(seq[1], seq[2])
}

writeNexus(x, fn)
writeNexus(x, "mol.nex")

print("alv " + fn)
quit()
